#include "../Fullscreen/FullScreenStructs.hlsli"
// Circular DOF by Kleber Garcia "Kecho" - 2017
// Click mouse in image and move to test circle dof size.
// Big circles can get achieved in linear time.
// Publication & Filter generator: https://github.com/kecho/CircularDofFilterGenerator
// yehar's blog: http://yehar.com/blog/?p=1495

// Test knobs:
#define ANIMATE_FILTER_SIZE
#define SLIDE_SHOW
//filter size can be bigger than 1, but then undersampling will occur.
#define MAX_FILTER_SIZE 1.0


// Prenormalization step available in siggraph publication. Can be generated by an offline tool, or passed as a cbuffer.
// Small slideshow to show effect on multiple images.

//Filter values:
/********************************************************************/
/********************************************************************/
/*         Generated Filter by CircularDofFilterGenerator tool      */
/*     Copyright (c)     Kleber A Garcia  (kecho_garcia@hotmail.com)*/
/*           https://github.com/kecho/CircularDofFilterGenerator    */
/********************************************************************/
/********************************************************************/
/**
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
**/
#define KERNEL_RADIUS 8
#define KERNEL_COUNT 17
const float4 Kernel0BracketsRealXY_ImZW = float4(-0.038708,0.943062,-0.025574,0.660892);
const float2 Kernel0Weights_RealX_ImY = float2(0.411259,-0.548794);
// const float4 Kernel0_RealX_ImY_RealZ_ImW[17] = {
//         float4(/*XY: Non Bracketed*/0.014096,-0.022658,/*Bracketed WZ:*/0.055991,0.004413),
//         float4(/*XY: Non Bracketed*/-0.020612,-0.025574,/*Bracketed WZ:*/0.019188,0.000000),
//         float4(/*XY: Non Bracketed*/-0.038708,0.006957,/*Bracketed WZ:*/0.000000,0.049223),
//         float4(/*XY: Non Bracketed*/-0.021449,0.040468,/*Bracketed WZ:*/0.018301,0.099929),
//         float4(/*XY: Non Bracketed*/0.013015,0.050223,/*Bracketed WZ:*/0.054845,0.114689),
//         float4(/*XY: Non Bracketed*/0.042178,0.038585,/*Bracketed WZ:*/0.085769,0.097080),
//         float4(/*XY: Non Bracketed*/0.057972,0.019812,/*Bracketed WZ:*/0.102517,0.068674),
//         float4(/*XY: Non Bracketed*/0.063647,0.005252,/*Bracketed WZ:*/0.108535,0.046643),
//         float4(/*XY: Non Bracketed*/0.064754,0.000000,/*Bracketed WZ:*/0.109709,0.038697),
//         float4(/*XY: Non Bracketed*/0.063647,0.005252,/*Bracketed WZ:*/0.108535,0.046643),
//         float4(/*XY: Non Bracketed*/0.057972,0.019812,/*Bracketed WZ:*/0.102517,0.068674),
//         float4(/*XY: Non Bracketed*/0.042178,0.038585,/*Bracketed WZ:*/0.085769,0.097080),
//         float4(/*XY: Non Bracketed*/0.013015,0.050223,/*Bracketed WZ:*/0.054845,0.114689),
//         float4(/*XY: Non Bracketed*/-0.021449,0.040468,/*Bracketed WZ:*/0.018301,0.099929),
//         float4(/*XY: Non Bracketed*/-0.038708,0.006957,/*Bracketed WZ:*/0.000000,0.049223),
//         float4(/*XY: Non Bracketed*/-0.020612,-0.025574,/*Bracketed WZ:*/0.019188,0.000000),
//         float4(/*XY: Non Bracketed*/0.014096,-0.022658,/*Bracketed WZ:*/0.055991,0.004413),
// };
const float4 Kernel1BracketsRealXY_ImZW = float4(0.000115,0.559524,0.000000,0.178226);
const float2 Kernel1Weights_RealX_ImY = float2(0.513282,4.561110);
// const float4 Kernel1_RealX_ImY_RealZ_ImW[17] = {
//         float4(/*XY: Non Bracketed*/0.000115,0.009116,/*Bracketed WZ:*/0.000000,0.051147),
//         float4(/*XY: Non Bracketed*/0.005324,0.013416,/*Bracketed WZ:*/0.009311,0.075276),
//         float4(/*XY: Non Bracketed*/0.013753,0.016519,/*Bracketed WZ:*/0.024376,0.092685),
//         float4(/*XY: Non Bracketed*/0.024700,0.017215,/*Bracketed WZ:*/0.043940,0.096591),
//         float4(/*XY: Non Bracketed*/0.036693,0.015064,/*Bracketed WZ:*/0.065375,0.084521),
//         float4(/*XY: Non Bracketed*/0.047976,0.010684,/*Bracketed WZ:*/0.085539,0.059948),
//         float4(/*XY: Non Bracketed*/0.057015,0.005570,/*Bracketed WZ:*/0.101695,0.031254),
//         float4(/*XY: Non Bracketed*/0.062782,0.001529,/*Bracketed WZ:*/0.112002,0.008578),
//         float4(/*XY: Non Bracketed*/0.064754,0.000000,/*Bracketed WZ:*/0.115526,0.000000),
//         float4(/*XY: Non Bracketed*/0.062782,0.001529,/*Bracketed WZ:*/0.112002,0.008578),
//         float4(/*XY: Non Bracketed*/0.057015,0.005570,/*Bracketed WZ:*/0.101695,0.031254),
//         float4(/*XY: Non Bracketed*/0.047976,0.010684,/*Bracketed WZ:*/0.085539,0.059948),
//         float4(/*XY: Non Bracketed*/0.036693,0.015064,/*Bracketed WZ:*/0.065375,0.084521),
//         float4(/*XY: Non Bracketed*/0.024700,0.017215,/*Bracketed WZ:*/0.043940,0.096591),
//         float4(/*XY: Non Bracketed*/0.013753,0.016519,/*Bracketed WZ:*/0.024376,0.092685),
//         float4(/*XY: Non Bracketed*/0.005324,0.013416,/*Bracketed WZ:*/0.009311,0.075276),
//         float4(/*XY: Non Bracketed*/0.000115,0.009116,/*Bracketed WZ:*/0.000000,0.051147)
// };

PixelOutput main(VertexToPixel input)
{
        float4 Kernel0_RealX_ImY_RealZ_ImW[17];
        Kernel0_RealX_ImY_RealZ_ImW[0]  = float4(/*XY: Non Bracketed*/0.014096,-0.022658,/*Bracketed WZ:*/0.055991,0.004413);
        Kernel0_RealX_ImY_RealZ_ImW[1]  = float4(/*XY: Non Bracketed*/-0.020612,-0.025574,/*Bracketed WZ:*/0.019188,0.000000);
        Kernel0_RealX_ImY_RealZ_ImW[2]  = float4(/*XY: Non Bracketed*/-0.038708,0.006957,/*Bracketed WZ:*/0.000000,0.049223);
        Kernel0_RealX_ImY_RealZ_ImW[3]  = float4(/*XY: Non Bracketed*/-0.021449,0.040468,/*Bracketed WZ:*/0.018301,0.099929);
        Kernel0_RealX_ImY_RealZ_ImW[4]  = float4(/*XY: Non Bracketed*/0.013015,0.050223,/*Bracketed WZ:*/0.054845,0.114689);
        Kernel0_RealX_ImY_RealZ_ImW[5]  = float4(/*XY: Non Bracketed*/0.042178,0.038585,/*Bracketed WZ:*/0.085769,0.097080);
        Kernel0_RealX_ImY_RealZ_ImW[6]  = float4(/*XY: Non Bracketed*/0.057972,0.019812,/*Bracketed WZ:*/0.102517,0.068674);
        Kernel0_RealX_ImY_RealZ_ImW[7]  = float4(/*XY: Non Bracketed*/0.063647,0.005252,/*Bracketed WZ:*/0.108535,0.046643);
        Kernel0_RealX_ImY_RealZ_ImW[8]  = float4(/*XY: Non Bracketed*/0.064754,0.000000,/*Bracketed WZ:*/0.109709,0.038697);
        Kernel0_RealX_ImY_RealZ_ImW[9]  = float4(/*XY: Non Bracketed*/0.063647,0.005252,/*Bracketed WZ:*/0.108535,0.046643);
        Kernel0_RealX_ImY_RealZ_ImW[10] = float4(/*XY: Non Bracketed*/0.057972,0.019812,/*Bracketed WZ:*/0.102517,0.068674);
        Kernel0_RealX_ImY_RealZ_ImW[11] = float4(/*XY: Non Bracketed*/0.042178,0.038585,/*Bracketed WZ:*/0.085769,0.097080);
        Kernel0_RealX_ImY_RealZ_ImW[12] = float4(/*XY: Non Bracketed*/0.013015,0.050223,/*Bracketed WZ:*/0.054845,0.114689);
        Kernel0_RealX_ImY_RealZ_ImW[13] = float4(/*XY: Non Bracketed*/-0.021449,0.040468,/*Bracketed WZ:*/0.018301,0.099929);
        Kernel0_RealX_ImY_RealZ_ImW[14] = float4(/*XY: Non Bracketed*/-0.038708,0.006957,/*Bracketed WZ:*/0.000000,0.049223);
        Kernel0_RealX_ImY_RealZ_ImW[15] = float4(/*XY: Non Bracketed*/-0.020612,-0.025574,/*Bracketed WZ:*/0.019188,0.000000);
        Kernel0_RealX_ImY_RealZ_ImW[16] = float4(/*XY: Non Bracketed*/0.014096,-0.022658,/*Bracketed WZ:*/0.055991,0.004413);
        float4 Kernel1_RealX_ImY_RealZ_ImW[17];
        Kernel1_RealX_ImY_RealZ_ImW[0] = float4(/*XY: Non Bracketed*/0.000115,0.009116,/*Bracketed WZ:*/0.000000,0.051147);
        Kernel1_RealX_ImY_RealZ_ImW[1] = float4(/*XY: Non Bracketed*/0.005324,0.013416,/*Bracketed WZ:*/0.009311,0.075276);
        Kernel1_RealX_ImY_RealZ_ImW[2] = float4(/*XY: Non Bracketed*/0.013753,0.016519,/*Bracketed WZ:*/0.024376,0.092685);
        Kernel1_RealX_ImY_RealZ_ImW[3] = float4(/*XY: Non Bracketed*/0.024700,0.017215,/*Bracketed WZ:*/0.043940,0.096591);
        Kernel1_RealX_ImY_RealZ_ImW[4] = float4(/*XY: Non Bracketed*/0.036693,0.015064,/*Bracketed WZ:*/0.065375,0.084521);
        Kernel1_RealX_ImY_RealZ_ImW[5] = float4(/*XY: Non Bracketed*/0.047976,0.010684,/*Bracketed WZ:*/0.085539,0.059948);
        Kernel1_RealX_ImY_RealZ_ImW[6] = float4(/*XY: Non Bracketed*/0.057015,0.005570,/*Bracketed WZ:*/0.101695,0.031254);
        Kernel1_RealX_ImY_RealZ_ImW[7] = float4(/*XY: Non Bracketed*/0.062782,0.001529,/*Bracketed WZ:*/0.112002,0.008578);
        Kernel1_RealX_ImY_RealZ_ImW[8] = float4(/*XY: Non Bracketed*/0.064754,0.000000,/*Bracketed WZ:*/0.115526,0.000000);
        Kernel1_RealX_ImY_RealZ_ImW[9] = float4(/*XY: Non Bracketed*/0.062782,0.001529,/*Bracketed WZ:*/0.112002,0.008578);
        Kernel1_RealX_ImY_RealZ_ImW[10] = float4(/*XY: Non Bracketed*/0.057015,0.005570,/*Bracketed WZ:*/0.101695,0.031254);
        Kernel1_RealX_ImY_RealZ_ImW[11] = float4(/*XY: Non Bracketed*/0.047976,0.010684,/*Bracketed WZ:*/0.085539,0.059948);
        Kernel1_RealX_ImY_RealZ_ImW[12] = float4(/*XY: Non Bracketed*/0.036693,0.015064,/*Bracketed WZ:*/0.065375,0.084521);
        Kernel1_RealX_ImY_RealZ_ImW[13] = float4(/*XY: Non Bracketed*/0.024700,0.017215,/*Bracketed WZ:*/0.043940,0.096591);
        Kernel1_RealX_ImY_RealZ_ImW[14] = float4(/*XY: Non Bracketed*/0.013753,0.016519,/*Bracketed WZ:*/0.024376,0.092685);
        Kernel1_RealX_ImY_RealZ_ImW[15] = float4(/*XY: Non Bracketed*/0.005324,0.013416,/*Bracketed WZ:*/0.009311,0.075276);
        Kernel1_RealX_ImY_RealZ_ImW[16] = float4(/*XY: Non Bracketed*/0.000115,0.009116,/*Bracketed WZ:*/0.000000,0.051147);

	PixelOutput output;
        output.myColor = 0;
        if(input.myPosition.x < KERNEL_COUNT)
        {
                float2 c0 = Kernel0_RealX_ImY_RealZ_ImW[int(input.myPosition.x)].xy;
                float2 c1 = Kernel1_RealX_ImY_RealZ_ImW[int(input.myPosition.x)].xy;
                output.myColor = float4(c0.x,c0.y,c1.x,c1.y);        
        }

	return output;
}